#!/usr/bin/env python3

import os
import subprocess
import shlex
import json
import logging
import argparse
import time
import yaml
from getpass import getpass
from crypt import crypt
from hmac import compare_digest as compare_hash

from typing import Optional
from pathlib import Path

from indy.error import ErrorCode, IndyError

from src.utils import get_pool_genesis_txn_path, run_coroutine, PROTOCOL_VERSION

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

# Parse Arguments
parser = argparse.ArgumentParser(description='Manage your Sovrin Agent deployment')
subparsers = parser.add_subparsers(dest='subparser')

start_parser = subparsers.add_parser('start')
start_parser.add_argument('-p', '--port', help='Port the web server will run at')

stop_parser = subparsers.add_parser('stop')

restart_parser = subparsers.add_parser('restart')

args = parser.parse_args()

# Parse Config
with open('config.yml') as f:
    config = yaml.safe_load(f)

# Manage process config
agent_process_config_path = Path.home().joinpath(".agent_process_config")


def get_agent_process_config():
    return yaml.load(open(agent_process_config_path))


def write_agent_process_config(pid, keyhash):
    agent_process_config = open(agent_process_config_path, 'w')

    agent_process_config.write(yaml.dump({'keyhash': keyhash, 'pid': pid}))
    agent_process_config.close()


def process_is_running():
    if not agent_process_config_path.exists():
        return False
    else:
        agent_process_config = get_agent_process_config()
        if agent_process_config['pid'] == 0:
            return False
        try:
            os.kill(agent_process_config['pid'], 0)
        except OSError:
            return False
        else:
            return True


def start_process(port, password):
    if process_is_running():
        print("Process is already running")
        return
    else:
        subprocess_command = shlex.split('nohup ./index.py {} {}'.format(port, password))
        process = subprocess.Popen(subprocess_command, shell=False)
        print("Agent running with pid {}".format(process.pid))
        agent_process_config = get_agent_process_config()
        write_agent_process_config(process.pid, agent_process_config['keyhash'])


def stop_process():
    if not agent_process_config_path.exists():
        print("Agent PID not found. Try \"agent start\"")
    else:
        agent_process_config = get_agent_process_config()
        if agent_process_config['pid'] == 0:
            print("Agent PID not found. Try \"agent start\"")
        else:
            os.kill(agent_process_config['pid'], 9)
            time.sleep(.1)  # Wait for process to stop
            if process_is_running():
                print("Failed to stop Agent process")
            else:
                print("Agent process stopped successfully")


def start():
    if args.port:
        port = args.port
    else:
        port = 3000

    if not agent_process_config_path.exists():
        print("Since this is your first time, please enter a new password")
        password = getpass('Wallet Password: ')
        retype_password = getpass(prompt='Retype Wallet Password: ')
        if password != retype_password:
            print("Passwords don't match!")
            exit(1)
        else:
            write_agent_process_config(0, crypt(password))
    else:
        agent_process_config = get_agent_process_config()

        # FIXME: Storing the password here is not necessary. Used for now for convenience of
        # FIXME: not dealing with IndyError. Should not store hash!
        password = getpass('Wallet Password: ')
        hashed = agent_process_config['keyhash']
        if compare_hash(hashed, crypt(password, hashed)):
            print("Authentication Successful")
        else:
            print("Authentication Failed")
            exit(1)

    start_process(port, password)
    print("Your Agent is now running") # FIXME: On port ...


def stop():
    if not process_is_running():
        print("Agent is not running")
        exit(1)
    else:
        stop_process()


def restart():
    if process_is_running():
        stop_process()
    start()


cli = {
    'start': start,
    'stop': stop,
    'restart': restart
}

cli[args.subparser]()





